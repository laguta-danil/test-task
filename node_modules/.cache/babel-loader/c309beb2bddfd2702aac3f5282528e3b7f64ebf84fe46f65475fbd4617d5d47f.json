{"ast":null,"code":"export const formatTransactionDate = dateString => {\n  const date = new Date(dateString);\n  const now = new Date();\n\n  // Сбрасываем время для корректного сравнения дней\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const transactionDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  const diffTime = today.getTime() - transactionDate.getTime();\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  if (diffDays === 0) {\n    return 'Today';\n  } else if (diffDays === 1) {\n    return 'Yesterday';\n  } else if (diffDays > 1 && diffDays <= 6) {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long'\n    });\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  }\n};\nexport const getCurrentSeason = () => {\n  const month = new Date().getMonth();\n  if (month >= 2 && month <= 4) return 'spring';\n  if (month >= 5 && month <= 7) return 'summer';\n  if (month >= 8 && month <= 10) return 'fall';\n  return 'winter';\n};\nexport const getSeasonStartDate = season => {\n  const year = new Date().getFullYear();\n  switch (season) {\n    case 'spring':\n      return new Date(year, 2, 1);\n    // March 1\n    case 'summer':\n      return new Date(year, 5, 1);\n    // June 1\n    case 'fall':\n      return new Date(year, 8, 1);\n    // September 1\n    case 'winter':\n      return new Date(year, 11, 1);\n    // December 1\n    default:\n      return new Date(year, 0, 1);\n  }\n};\nexport const getDayOfSeason = () => {\n  const season = getCurrentSeason();\n  const seasonStart = getSeasonStartDate(season);\n  const today = new Date();\n  const diffTime = today.getTime() - seasonStart.getTime();\n  return Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1;\n};","map":{"version":3,"names":["formatTransactionDate","dateString","date","Date","now","today","getFullYear","getMonth","getDate","transactionDate","diffTime","getTime","diffDays","Math","floor","toLocaleDateString","weekday","month","day","year","getCurrentSeason","getSeasonStartDate","season","getDayOfSeason","seasonStart"],"sources":["/home/danil/WebstormProjects/testTask/src/utils/dateHelpers.ts"],"sourcesContent":["export const formatTransactionDate = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n\n  // Сбрасываем время для корректного сравнения дней\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const transactionDate = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate()\n  );\n\n  const diffTime = today.getTime() - transactionDate.getTime();\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n  if (diffDays === 0) {\n    return 'Today';\n  } else if (diffDays === 1) {\n    return 'Yesterday';\n  } else if (diffDays > 1 && diffDays <= 6) {\n    return date.toLocaleDateString('en-US', { weekday: 'long' });\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  }\n};\n\nexport const getCurrentSeason = (): 'spring' | 'summer' | 'fall' | 'winter' => {\n  const month = new Date().getMonth();\n  if (month >= 2 && month <= 4) return 'spring';\n  if (month >= 5 && month <= 7) return 'summer';\n  if (month >= 8 && month <= 10) return 'fall';\n  return 'winter';\n};\n\nexport const getSeasonStartDate = (season: string): Date => {\n  const year = new Date().getFullYear();\n  switch (season) {\n    case 'spring':\n      return new Date(year, 2, 1); // March 1\n    case 'summer':\n      return new Date(year, 5, 1); // June 1\n    case 'fall':\n      return new Date(year, 8, 1); // September 1\n    case 'winter':\n      return new Date(year, 11, 1); // December 1\n    default:\n      return new Date(year, 0, 1);\n  }\n};\n\nexport const getDayOfSeason = (): number => {\n  const season = getCurrentSeason();\n  const seasonStart = getSeasonStartDate(season);\n  const today = new Date();\n  const diffTime = today.getTime() - seasonStart.getTime();\n  return Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}